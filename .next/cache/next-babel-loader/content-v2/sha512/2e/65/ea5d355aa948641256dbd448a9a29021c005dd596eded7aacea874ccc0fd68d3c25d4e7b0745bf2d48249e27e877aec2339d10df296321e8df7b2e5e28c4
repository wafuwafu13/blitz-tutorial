{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { useMutation } from \"blitz\";\nimport { LabeledTextField } from \"app/components/LabeledTextField\";\nimport { Form, FORM_ERROR } from \"app/components/Form\";\nimport signup from \"app/auth/mutations/signup\";\nimport { SignupInput } from \"app/auth/validations\";\nexport const SignupForm = props => {\n  const [signupMutation] = useMutation(signup);\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"Create an Account\"), __jsx(Form, {\n    submitText: \"Create Account\",\n    schema: SignupInput,\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: async values => {\n      try {\n        var _props$onSuccess;\n\n        await signupMutation(values);\n        (_props$onSuccess = props.onSuccess) === null || _props$onSuccess === void 0 ? void 0 : _props$onSuccess.call(props);\n      } catch (error) {\n        var _error$meta, _error$meta$target;\n\n        if (error.code === \"P2002\" && (_error$meta = error.meta) !== null && _error$meta !== void 0 && (_error$meta$target = _error$meta.target) !== null && _error$meta$target !== void 0 && _error$meta$target.includes(\"email\")) {\n          // This error comes from Prisma\n          return {\n            email: \"This email is already being used\"\n          };\n        } else {\n          return {\n            [FORM_ERROR]: error.toString()\n          };\n        }\n      }\n    }\n  }, __jsx(LabeledTextField, {\n    name: \"email\",\n    label: \"Email\",\n    placeholder: \"Email\"\n  }), __jsx(LabeledTextField, {\n    name: \"password\",\n    label: \"Password\",\n    placeholder: \"Password\",\n    type: \"password\"\n  })));\n};\nexport default SignupForm;","map":null,"metadata":{},"sourceType":"module"}