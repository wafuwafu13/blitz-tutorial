{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { SecurePassword, AuthenticationError } from \"blitz\";\nimport db from \"db\";\nexport const authenticateUser = async (email, password) => {\n  const user = await db.user.findFirst({\n    where: {\n      email\n    }\n  });\n  if (!user) throw new AuthenticationError();\n  const result = await SecurePassword.verify(user.hashedPassword, password);\n\n  if (result === SecurePassword.VALID_NEEDS_REHASH) {\n    // Upgrade hashed password with a more secure hash\n    const improvedHash = await SecurePassword.hash(password);\n    await db.user.update({\n      where: {\n        id: user.id\n      },\n      data: {\n        hashedPassword: improvedHash\n      }\n    });\n  }\n\n  const {\n    hashedPassword\n  } = user,\n        rest = _objectWithoutProperties(user, [\"hashedPassword\"]);\n\n  return rest;\n};","map":null,"metadata":{},"sourceType":"module"}